#!/usr/bin/env ruby

require 'rainbow'

require_relative '../lib/jepeto'
include Jepeto

# -Utility-functions------------------------------------------------------------
def get_correct_draft
  drafts = Jepeto::Publisher.drafts

  if drafts.empty?
    $stdout.puts 'There are no drafts'
    exit
  end

  $stdout.puts 'Here is a list of draft posts:'
  drafts.each_with_index do |draft, index|
    $stdout.puts "#{index + 1}. #{Jepeto::Publisher.normalize draft}"
  end

  $stdout.print 'Which post do you want to publish? '
  answer = $stdin.gets

  if answer.to_i == 0
    error =  'Error:'.foreground(:red)
    error << 'You have to enter the number of the post!'
    $stderr.puts error
    # FIXME: Instead of exiting, show the list of drafts again!
    exit
  end

  drafts[(answer.to_i) - 1]
end

def get_query
  query = {}

  # Welcome message
  $stdout.puts 'Welcome to Jepeto'

  # First get the query type from the user
  $stdout.puts 'Here are your options:'

  options =  "\t1. Create a new post\n"
  options << "\t2. Create a new page\n"
  options << "\t3. Generate a sitemap\n"
  options << "\t4. Publish a post"
  $stdout.puts options

  $stdout.print 'What do you want to do [1/2/3/4]? '

  answer = $stdin.gets.chomp

  # OPTIMIZE: Change that to a case
  if answer == '1'
    query[:type] = 'post'
  elsif answer == '2'
    query[:type] = 'page'
  elsif answer == '3'
    query[:type] = 'sitemap'
  elsif answer == '4'
    query[:type] = 'publish'
  else
    error =  "\nERROR:".foreground(:red)
    error << " Jepeto doesn't understand what you want..."
    $stderr.puts error
    exit
  end

  # Get the post title or the page name.
  # Doesn't apply for sitemaps
  if query[:type] == 'post' || query[:type] == 'page'
    if query[:type] == 'post'
      query_type_label = 'title'
    elsif query[:type] == 'page'
      query_type_label = 'name'
    end

    # Get the query id, which is the title of
    # the post or the name of the page.
    puts "Please enter a #{query_type_label} for the new #{query[:type]}:"
    query[:id] = $stdin.gets.chomp

    if query[:id].empty?
      error =  'ERROR:'.foreground(:red)
      error << " You can't create a #{query[:type]} without a #{query_type_label}"
      $stderr.puts error
      exit
    end
  elsif query[:type] == 'publish'
    query[:id] = get_correct_draft
  end

  query
end

def get_query_id(query_type)
  if query_type == 'post'
    query_type_label = 'title'
  elsif query_type == 'page'
    query_type_label = 'name'
  end

  puts "Please enter a #{query_type} #{query_type_label}:\n"
  id = $stdin.gets.chomp

  if id.empty?
    error =  'ERROR:'.foreground(:red)
    error << " The #{query_type} #{query_type_label} can't be blank"
    $strerr.puts error
    exit
  else
    id
  end
end
# ------------------------------------------------------------------------------

# cd to the right directory
unless Jepeto::posts_directory_exists?
  if Jepeto::in_posts_directory?
    Dir.chdir('..')
  else
    error =  'ERROR:'.foreground(:red)
    error << ' Unable to find the posts directory'
    $stderr.puts error
    exit
  end
end

# -Option-and-Query-Parsing-----------------------------------------------------
parser = Jepeto::Parser.new
begin
  options, query = parser.parse!
rescue InvalidQueryTypeError
  options = parser.options
  query = get_query
rescue InvalidNameOrTitleError
  options = parser.options
  query = {type: ARGV.first}
  query[:id] = get_query_id(query[:type])
end
# ------------------------------------------------------------------------------

if query[:type] == 'post'
  options[:title] = query[:id]
  begin
    post = Jepeto::JekyllPost.new(options)
    file = post.save!

    unless file.nil?
      puts "Post successfully created! Full path:\n".foreground(:green)
      puts file
    end
  rescue StandardError => e
    error =  'ERROR:'.foreground(:red)
    error << " #{e.message}"
    $stderr.puts error
  end
elsif query[:type] == 'page'
  options[:name] = query[:id]
  begin
    page = Jepeto::Page.new(options)
    file = page.generate!

    unless file.nil?
      puts "Page was successfully created! Full path:\n".foreground(:green)
      puts file
    end
  rescue StandardError => e
    error =  'ERROR:'.foreground(:red)
    error << " #{e.message}!"
    $stderr.puts error
  end
elsif query[:type] == 'sitemap'
  begin
    sitemap = Jepeto::Sitemap.new
    file = sitemap.generate!
  rescue UnableToParseJpRcError => e
    puts e.message.foreground(:red)

    puts "\nPlease enter the root of your website, e.g.: http://www.example.com : "
    url = $stdin.gets
    sitemap = Jepeto::Sitemap.new
    file = sitemap.generate!(url)
  end

  unless file.nil?
    puts "Sitemap successfully created! Full path:\n".foreground(:green)
    puts file
  end
elsif query[:type] = 'publish'
  query[:id] = get_correct_draft if query[:id].nil?
  post = Jepeto::Publisher.publish!(query[:id])
end
